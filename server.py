import asyncio
import websockets
import json

async def handle_connection(websocket, path):
	async for message in websocket:
		'''
		Assume the websocket message is a JSON string of the form:
		{
			"id": "1234", // arbitrary convo id generated by client
			"speaker": 1, // should be 1 or 2
			"message": "I like pizza." // arbitrary message
		}
		'''
		decode_message = json.loads(message)

		# transcribe the message

		# check if conversation id exists in redis
		# if exists, get the conversation so far
		# if not, create a new conversation

		# add delimiter to conversation string
		# add the new message to the conversation

		# save the conversation back to redis


		# send the transcription of the new message back to the client
		await websocket.send(f"Received message: {message}")

async def main():
	async with websockets.serve(handle_connection, "localhost", 8765):
		await asyncio.Future()

if __name__ == "__main__":
	asyncio.run(main())